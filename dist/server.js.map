{"version":3,"sources":["../server/server.js"],"names":["express","require","bodyParser","MongoClient","Resource","Category","module","exports","SourceMapSupport","ObjectId","ObjectID","install","app","use","static","json","db","process","env","NODE_ENV","webpack","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","filter","query","category","isActive","collection","find","toArray","then","metadata","total_count","resources","length","_metadata","records","catch","error","status","message","post","newResource","body","created","Date","err","validateResource","insertOne","cleanupResource","_id","result","insertedId","limit","next","resourceId","params","id","resource","put","update","convertResource","savedResource","delete","deleteOne","deleteResult","n","categories","newCategory","validateCategory","cleanupCategory","categoryId","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst MongoClient = require('mongodb').MongoClient;\r\nimport path from 'path';\r\nconst Resource = require('./resource.js');\r\nconst Category = require('./category.js');\r\nmodule.exports = 'babel-polyfill';\r\nconst SourceMapSupport = require('source-map-support');\r\nconst ObjectId = require('mongodb').ObjectID;\r\n// import express from 'express';\r\n// import bodyParser from 'body-parser';\r\n// import { MongoClient } from 'mongodb';\r\n// import Resource from './resource.js';\r\n// import SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\nconst app = express();\r\n\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\nvar db;\r\n\r\nif(process.env.NODE_ENV !== 'production') {\r\n    const webpack = require('webpack');\r\n    const webpackDevMiddleware = require('webpack-dev-middleware');\r\n    const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n    const config = require('../webpack.config');\r\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n    config[new webpack.HotModuleReplacementPlugin()];\r\n\r\n    const bundler = webpack(config);\r\n    app.use(webpackDevMiddleware(bundler, {noInfo:true}));\r\n    app.use(webpackHotMiddleware(bundler, {log:console.log}));\r\n}\r\n//commented out because error shown in resourcelist api calls\r\n// app.get('*', (req,res) => {\r\n//     res.sendFile(path.resolve('static/index.html'));\r\n// });\r\n\r\napp.get('/api/resources', (req, res) => {\r\n    console.log('resources got.');\r\n    const filter = {};\r\n    if (req.query.category) filter.category = req.query.category;\r\n    if(req.query.isActive) filter.isActive = req.query.isActive;\r\n    db.collection('resources').find(filter).toArray().then(resources => {\r\n        const metadata = { total_count: resources.length };\r\n        res.json({_metadata: metadata, records: resources});\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message:`Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.post('/api/resources', (req, res) => {\r\n    const newResource = req.body;\r\n    newResource.created = new Date();\r\n    if (!newResource.status) newResource.status = 'New';\r\n    const err = Resource.validateResource(newResource);\r\n    if (err) {\r\n        res.status(422).json({message:`Invalid request: ${err}`});\r\n        return;\r\n    }\r\n    db.collection('resources').insertOne(Resource.cleanupResource(newResource))\r\n    .then(result => db.collection('resources').find({_id: result.insertedId}).limit(1).next()\r\n).then(newResource => {\r\n    res.json(newResource);\r\n}).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({message: `Internal Server Error: ${error}`});\r\n});\r\n   // resources.push(newResource);\r\n  //  res.json(newResource);\r\n});\r\n\r\napp.get('/api/resources/:id', (req,res) => {\r\n    let resourceId;\r\n    try {\r\n        resourceId = new ObjectId(req.params.id);\r\n    } catch (error) {\r\n        res.status(422).json({ message: `Invalid resource ID format: ${error }`});\r\n        return;\r\n    }\r\n\r\n    db.collection('resources').find({_id: resourceId}).limit(1)\r\n    .next()\r\n    .then(resource => {\r\n        if (!resource) res.status(404).json({message: `No resource exists: ${resourceId}`});\r\n        else res.json(resource);\r\n    })\r\n    .catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message:`Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.put('/api/resources/:id', (req, res) => {\r\n    let resourceId;\r\n    try {\r\n        resourceId = new ObjectId(req.params.id);\r\n    } catch (error) {\r\n        res.status(422).json({message: `Invalid resource ID format: ${error}`});\r\n        return;\r\n    }\r\n\r\n    const resource = req.body;\r\n    delete resource._id;\r\n\r\n    const err = Resource.validateResource(resource);\r\n    if (err) {\r\n        res.status(422).json({message:`Invalid request: ${err}`});\r\n        return;\r\n    }\r\n\r\n    db.collection('resources').update({_id: resourceId},\r\n    Resource.convertResource(resource)).then(() => \r\n        db.collection('resources').find({_id: resourceId}).limit(1)\r\n        .next()\r\n    )\r\n    .then(savedResource => {\r\n        res.json(savedResource);\r\n    })\r\n    .catch (error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.delete('/api/resources/:id', (req,res) => {\r\n    let resourceId;\r\n    try {\r\n        resourceId = new ObjectId(req.params.id);\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.status(422).json({message: `Invalid resource ID format: ${error}`});\r\n        return;\r\n    };\r\n\r\n    db.collection('resources').deleteOne({_id: resourceId}).then((deleteResult) => {\r\n        if (deleteResult.result.n === 1) res.json({status: 'OK'});\r\n        else res.json({status: 'Warning: object not found.'});\r\n    })\r\n    .catch( error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.get('/api/categories', (req, res) => {\r\n    console.log('categories got.');\r\n    //const filter = {};\r\n    db.collection('categories').find().toArray().then(categories => {\r\n        const metadata = {total_count: categories.length};\r\n        res.json({_metadata: metadata, records: categories});\r\n    }).catch(error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\napp.post('/api/categories', (req, res) => {\r\n    const newCategory = req.body;\r\n    newCategory.created = new Date();\r\n    if (!newCategory.status) newCategory.status = 'New';\r\n    const err = Category.validateCategory(newCategory);\r\n    if (err) {\r\n        res.status(422).json({message: `Invalid request: ${err}`});\r\n        return;\r\n    }\r\n    db.collection('categories').insertOne(Category.cleanupCategory(newCategory))\r\n    .then(result => db.collection('categories').find({_id: result.insertedId}).limit(1).next()\r\n).then(newCategory => {\r\n    res.json(newCategory);\r\n}).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({message: `Internal Server Error: ${error}`});\r\n});\r\n});\r\n\r\napp.delete('/api/categories/:id', (req, res) => {\r\n    let categoryId;\r\n    try {\r\n        categoryId = new ObjectId(req.params.id);\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.status(422).json({message: `Invalid resource ID format: ${error}`});\r\n        return;\r\n    };\r\n\r\n    db.collection('categories').deleteOne({_id: categoryId}).then((deleteResult) => {\r\n        if (deleteResult.result.n === 1) res.json({status: 'OK'});\r\n        else res.json({status: 'Warning: object not found.'});\r\n    })\r\n    .catch( error => {\r\n        console.log(error);\r\n        res.status(500).json({message: `Internal Server Error: ${error}`});\r\n    });\r\n});\r\n\r\nMongoClient.connect('mongodb://localhost/fred').then(connection => {\r\n    db = connection;\r\n    app.listen(3000, function(){\r\n    console.log('App started on port 3000');\r\n    });\r\n}).catch(error => {\r\n    console.log(\"ERROR\", error);\r\n});"]}